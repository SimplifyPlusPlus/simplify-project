@using Simplify.Project.API.Contracts
@using Simplify.Project.Front.Helpers
<input type="text" class="employee-search-field" placeholder="Поиск по справочнику" @oninput="onInputDebounced">

@foreach (var item in searchResults)
{
    <div>
        <p>@item.Name | @item.Type</p>
    </div>
}

@code {

    string searchValue = "";
    Action<ChangeEventArgs> onInputDebounced;


    [Inject] private HttpClient? httpClient { get; set; }

    List<SearchResultDto> searchResults { get; set; } = new();

    protected override void OnInitialized()
    {
        onInputDebounced = DebounceEvent<ChangeEventArgs>(e => searchValue = (string)e.Value, TimeSpan.FromMilliseconds(500));
        base.OnInitialized();
    }

    Action<T> DebounceEvent<T>(Action<T> action, TimeSpan interval)
    {
        return Debouncer.Debounce<T>(arg =>
        {
            InvokeAsync(() =>
            {
                action(arg);
                GetSearchResults();
                StateHasChanged();
            });
        }, interval);
    }

    private async void GetSearchResults()
    {
        ArgumentNullException.ThrowIfNull(httpClient);
        if (searchValue == string.Empty)
            searchResults = new();
        else
            searchResults = await HttpClientHelper.GetJsonFromServer<List<SearchResultDto>>(
                httpClient,
                $"search?searchString={searchValue}",
                "Произошла ошибка при поиске") ?? new List<SearchResultDto>();

        StateHasChanged();
    }
}
