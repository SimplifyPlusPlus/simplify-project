@inject IJSRuntime _jsRuntime

<style>
	.details-card {
	  position: absolute;
      display: flex;
      flex-direction: column;
      box-shadow: 0px 3px 4px -2px black;
    }
    
    .details-card-body {
      padding: 1rem 3rem !important;
    }
</style>

<div id="@Id" class="details-card" style="width: inherit; display: @_display; top: @(_positionY + 20)px;">
	<div style="margin-left: 2rem;">
		<Triangle Color="linear-gradient(0deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9), var(--brand))" />
	</div>
	<div class="details-card-body" style="background: @(BackgroundColor ?? _backgroundColorDefault);">
		@Body
	</div>
</div>

@code {
	private string _display = "none;";
	private double _positionX = 0;
	private double _positionY = 0;
	
	[Parameter, EditorRequired]
	public RenderFragment? Body { get; set; }

	[Parameter]
	public string? BackgroundColor { get; set; }

	private string _backgroundColorDefault = "linear-gradient(0deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9)), var(--brand)";
	
	private Guid Id { get; set; } = Guid.NewGuid();
	
	private Action? OnOpen { get; set; }
	
	public Action? OnClose { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
			await _jsRuntime.InvokeVoidAsync("registerDetailsCardEvents", Id);

		await base.OnAfterRenderAsync(firstRender);
	}

	public void Open(double offsetTop, double offsetLeft = 0)
	{
		_display = "flex";
		_positionY = offsetTop;
		_positionX = Convert.ToInt32(offsetLeft) / 2.0;

		OnOpen?.Invoke();
		StateHasChanged();
	}

	public void Close()
	{
		_display = "none;";
		_positionY = 0;
		_positionX = 0;
		
		OnClose?.Invoke();
		StateHasChanged();
	}
}
