@inject IJSRuntime _jsRuntime

<style>
	.details-card {
	  position: absolute;
      display: flex;
      flex-direction: column;
    }
    
    .details-card-arrow-up {
      width: 0; 
      height: 0; 
      margin-left: 32px;
      border-left: 15px solid transparent;
      border-right: 15px solid transparent;
      border-bottom: 15px solid linear-gradient(0deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9), var(--brand));
    }
    
    .details-card-body {
      /*min-width: 400px;*/
      /*width: 100%;*/
      padding: 1rem 2rem !important;
      background: linear-gradient(0deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9)), var(--brand);
    }
</style>

<div id="@Id" class="details-card" style="width: inherit; display: @_display">
	<div style="margin-left: 2rem; margin-top: 4px;">
		<Triangle Color="linear-gradient(0deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9), var(--brand))" />
	</div>
	<div class="details-card-body">
		@Body
	</div>
</div>

@code {
	private string _display = "none;";
	
	[Parameter, EditorRequired]
	public RenderFragment? Body { get; set; }

	private Guid Id { get; set; } = Guid.NewGuid();
	
	private Action? OnOpen { get; set; }
	
	public Action? OnClose { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
			await _jsRuntime.InvokeVoidAsync("registerDetailsCardEvents", Id);

		await base.OnAfterRenderAsync(firstRender);
	}

	public void Open(int offsetTop)
	{
		_display = $"flex; top: {offsetTop + 16}px;";
		
		OnOpen?.Invoke();
		StateHasChanged();
		
		Console.WriteLine("Card open");
	}

	public void Close()
	{
		_display = "none;";
		
		OnClose?.Invoke();
		StateHasChanged();
	}
}
